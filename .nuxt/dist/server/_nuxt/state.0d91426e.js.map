{"version":3,"file":"state.0d91426e.js","sources":["../../../../stores/state.js"],"sourcesContent":["import * as BABYLON from 'babylonjs';\nimport 'babylonjs-loaders';\n\nfunction scaleBetween(unscaledNum, minAllowed, maxAllowed, min, max) {\n  return (\n    ((maxAllowed - minAllowed) * (unscaledNum - min)) / (max - min) + minAllowed\n  );\n}\n\nexport const useStateStore = defineStore('StateStore', {\n  state: () => ({\n    texEmissive: [],\n    canvas: null,\n    engine: null,\n    scene: null,\n    obj3d: null,\n    progress: 0,\n    log: [],\n    isLoading: true,\n    baseUrl:\n      'https://raw.githubusercontent.com/0000rgb124/rgb124.github.io/main/public/',\n  }),\n\n  getters: {\n    getProgress: (state) => state.progress,\n    getIsLoading: (state) => state.isLoading,\n  },\n\n  actions: {\n    setCanvas(ref) {\n      this.canvas = ref;\n    },\n\n    setEngine() {\n      this.engine = new BABYLON.Engine(this.canvas, true, {\n        preserveDrawingBuffer: true,\n        stencil: true,\n      });\n\n      this.scene = new BABYLON.Scene(this.engine);\n    },\n\n    /**------------------------------------------------------------------------\n     *                           ASSETS LOADING\n     *------------------------------------------------------------------------**/\n\n    loadAssets() {\n      const assetsManager = new BABYLON.AssetsManager(this.scene);\n\n      assetsManager.onProgress = (\n        remainingCount,\n        totalCount,\n        lastFinishedTask\n      ) => {\n        this.progress = scaleBetween(remainingCount, 0, 100, totalCount, 0);\n      };\n\n      const log = this.log;\n\n      assetsManager.onTaskSuccessObservable.add(function (task) {\n        log.unshift(task.name);\n\n        log.unshift();\n      });\n\n      /**----------------------\n       *    EMISSIVE TEXTURES\n       *------------------------**/\n\n      for (let i = 0; i < 76; i++) {\n        const emissiveTexUrl = `${\n          this.baseUrl\n        }texture/emissive/Emission_v2_000${i.toString().padStart(2, '0')}.jpg`;\n\n        this.texEmissive[i] = assetsManager.addTextureTask(\n          'Emission_v2_000' + i.toString().padStart(2, '0') + '.jpg',\n          emissiveTexUrl\n        );\n\n        // const currentTask = this.texEmissive[i];\n\n        // currentTask.onSuccess = (task) => {\n        //   console.log(task);\n        // };\n      }\n\n      /**----------------------\n       *    OBJECT 3D\n       *------------------------**/\n\n      const obj3dUrl = this.baseUrl + 'modelinglogo2.obj';\n\n      console.log(obj3dUrl);\n\n      this.obj3d = assetsManager.addMeshTask(\n        'modelinglogo2.obj',\n        ['fleche_up', 'cube_center', 'fleche_down'],\n        obj3dUrl\n      );\n\n      assetsManager.load();\n      assetsManager.onFinish = () => {\n        this.isLoading = false;\n\n        BABYLON.MeshBuilder.CreateBox('box', {});\n\n        // CAMERA SETUP\n        const camera = new BABYLON.ArcRotateCamera(\n          'Camera',\n          0.75,\n          1.25,\n          8,\n          BABYLON.Vector3.Zero(),\n          this.scene\n        );\n        // camera.lowerAlphaLimit = Math.PI;\n        // camera.upperAlphaLimit = Math.PI * 2;\n        camera.attachControl(this.canvas, false);\n        camera.useAutoRotationBehavior = true;\n\n        camera.lowerRadiusLimit = 4;\n        camera.upperRadiusLimit = 15;\n\n        const light = new BABYLON.HemisphericLight(\n          'light',\n          new BABYLON.Vector3(1, 1, 0),\n          this.scene\n        );\n\n        light.intensity = 0.25;\n        this.scene.clearColor = new BABYLON.Color3(1, 1, 1);\n        this.engine.runRenderLoop(() => {\n          this.scene.render();\n        });\n      };\n    },\n  },\n});\n\nif (import.meta.hot) {\n  import.meta.hot.accept(acceptHMRUpdate(useStateStore, import.meta.hot));\n}\n"],"names":[],"mappings":";;;;;AAGA,SAAA,aAAA,aAAA,YAAA,YAAA,KAAA,KAAA;AACA,UACA,aAAA,eAAA,cAAA,QAAA,MAAA,OAAA;AAEA;AAEA,MAAA,gBAAA,YAAA,cAAA;AAAA,EACA,OAAA,OAAA;AAAA,IACA,aAAA,CAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,OAAA;AAAA,IACA,OAAA;AAAA,IACA,UAAA;AAAA,IACA,KAAA,CAAA;AAAA,IACA,WAAA;AAAA,IACA,SACA;AAAA,EACA;AAAA,EAEA,SAAA;AAAA,IACA,aAAA,CAAA,UAAA,MAAA;AAAA,IACA,cAAA,CAAA,UAAA,MAAA;AAAA,EACA;AAAA,EAEA,SAAA;AAAA,IACA,UAAA,KAAA;AACA,WAAA,SAAA;AAAA,IACA;AAAA,IAEA,YAAA;AACA,WAAA,SAAA,IAAA,QAAA,OAAA,KAAA,QAAA,MAAA;AAAA,QACA,uBAAA;AAAA,QACA,SAAA;AAAA,MACA,CAAA;AAEA,WAAA,QAAA,IAAA,QAAA,MAAA,KAAA,MAAA;AAAA,IACA;AAAA,IAMA,aAAA;AACA,YAAA,gBAAA,IAAA,QAAA,cAAA,KAAA,KAAA;AAEA,oBAAA,aAAA,CACA,gBACA,YACA,qBACA;AACA,aAAA,WAAA,aAAA,gBAAA,GAAA,KAAA,YAAA,CAAA;AAAA,MACA;AAEA,YAAA,MAAA,KAAA;AAEA,oBAAA,wBAAA,IAAA,SAAA,MAAA;AACA,YAAA,QAAA,KAAA,IAAA;AAEA,YAAA,QAAA;AAAA,MACA,CAAA;AAMA,eAAA,IAAA,GAAA,IAAA,IAAA,KAAA;AACA,cAAA,iBAAA,GACA,KAAA,0CACA,EAAA,WAAA,SAAA,GAAA,GAAA;AAEA,aAAA,YAAA,KAAA,cAAA;AAAA,UACA,oBAAA,EAAA,SAAA,EAAA,SAAA,GAAA,GAAA,IAAA;AAAA,UACA;AAAA,QACA;AAAA,MAOA;AAMA,YAAA,WAAA,KAAA,UAAA;AAEA,cAAA,IAAA,QAAA;AAEA,WAAA,QAAA,cAAA;AAAA,QACA;AAAA,QACA,CAAA,aAAA,eAAA,aAAA;AAAA,QACA;AAAA,MACA;AAEA,oBAAA,KAAA;AACA,oBAAA,WAAA,MAAA;AACA,aAAA,YAAA;AAEA,gBAAA,YAAA,UAAA,OAAA,CAAA,CAAA;AAGA,cAAA,SAAA,IAAA,QAAA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,QAAA,QAAA,KAAA;AAAA,UACA,KAAA;AAAA,QACA;AAGA,eAAA,cAAA,KAAA,QAAA,KAAA;AACA,eAAA,0BAAA;AAEA,eAAA,mBAAA;AACA,eAAA,mBAAA;AAEA,cAAA,QAAA,IAAA,QAAA;AAAA,UACA;AAAA,UACA,IAAA,QAAA,QAAA,GAAA,GAAA,CAAA;AAAA,UACA,KAAA;AAAA,QACA;AAEA,cAAA,YAAA;AACA,aAAA,MAAA,aAAA,IAAA,QAAA,OAAA,GAAA,GAAA,CAAA;AACA,aAAA,OAAA,cAAA,MAAA;AACA,eAAA,MAAA;QACA,CAAA;AAAA,MACA;AAAA,IACA;AAAA,EACA;AACA,CAAA;"}